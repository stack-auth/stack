import { PrismaClient } from '@prisma/client';
import { throwErr } from '@stackframe/stack-shared/dist/utils/errors';
const prisma = new PrismaClient();


async function seed() {
  console.log('Seeding database...');

  const oldProject = await prisma.project.findUnique({
    where: {
      id: 'internal',
    },
  });

  let createdProject;
  if (oldProject) {
    console.log('Internal project already exists, skipping its creation');
  } else {
    createdProject = await prisma.project.upsert({
      where: {
        id: 'internal',
      },
      create: {
        id: 'internal',
        displayName: 'Stack Dashboard',
        description: 'Stack\'s admin dashboard',
        isProductionMode: false,
        apiKeySets: {
          create: [{
            description: "Internal API key set",
            publishableClientKey: "this-publishable-client-key-is-for-local-development-only",
            secretServerKey: "this-secret-server-key-is-for-local-development-only",
            superSecretAdminKey: "this-super-secret-admin-key-is-for-local-development-only",
            expiresAt: new Date('2099-12-31T23:59:59Z'),
          }],
        },
        config: {
          create: {
            allowLocalhost: true,
            oauthProviderConfigs: {
              create: (['github', 'facebook', 'google', 'microsoft'] as const).map((id) => ({
                id,
                proxiedOAuthConfig: {
                  create: {
                    type: id.toUpperCase() as any,
                  }
                },
                projectUserOAuthAccounts: {
                  create: []
                }
              })),
            },
            emailServiceConfig: {
              create: {
                proxiedEmailServiceConfig: {
                  create: {}
                }
              }
            },
            credentialEnabled: true,
            magicLinkEnabled: true,
            createTeamOnSignUp: false,
            clientTeamCreationEnabled: true,
          },
        },
      },
      update: {},
    });
    console.log('Internal project created');
  }

  // eslint-disable-next-line no-restricted-syntax
  const adminGithubId = process.env.STACK_SETUP_ADMIN_GITHUB_ID;
  if (adminGithubId) {
    console.log("Found admin GitHub ID in environment variables, creating admin user...");
    await prisma.projectUser.upsert({
      where: {
        projectId_projectUserId: {
          projectId: 'internal',
          projectUserId: '707156c3-0d1b-48cf-b09d-3171c7f613d5',
        },
      },
      create: {
        projectId: 'internal',
        projectUserId: '707156c3-0d1b-48cf-b09d-3171c7f613d5',
        displayName: 'Admin user generated by seed script',
        primaryEmailVerified: false,
        authWithEmail: false,
        serverMetadata: {
          managedProjectIds: [
            "internal",
          ],
        },
        projectUserOAuthAccounts: {
          create: [{
            providerAccountId: adminGithubId,
            projectConfigId: createdProject?.configId ?? oldProject?.configId ?? throwErr('No internal project config ID found'),
            oauthProviderConfigId: 'github',
          }],
        },
      },
      update: {},
    });
    console.log(`Admin user created (if it didn't already exist)`);
  } else {
    console.log('No admin GitHub ID found in environment variables, skipping admin user creation');
  }

  console.log('Seeding complete!');
}

seed().catch(async (e) => {
  console.error(e);
  await prisma.$disconnect();
  process.exit(1);
// eslint-disable-next-line @typescript-eslint/no-misused-promises, @typescript-eslint/return-await
}).finally(async () => await prisma.$disconnect());
