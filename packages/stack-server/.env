# Basic
NEXT_PUBLIC_STACK_URL=# enter your stack endpoint here, For local development: http://localhost:8101  (no trailing slash)
NEXT_PUBLIC_STACK_PROJECT_ID=internal
NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=# enter your Stack publishable client key here. For local development, just enter a random string, then run `pnpm prisma:server migrate reset`
STACK_SECRET_SERVER_KEY=# enter your Stack secret client key here. For local development, do the same as above
SERVER_SECRET=# enter your server secret here. This is used to sign the JWT tokens. Generated using `scripts/generateKey.ts`

# OAuth
# These are optional for local development if you don't use OAuth
GITHUB_CLIENT_ID=# client
GITHUB_CLIENT_SECRET=# client secret
GOOGLE_CLIENT_ID=# client id
GOOGLE_CLIENT_SECRET=# client secret
FACEBOOK_CLIENT_ID=# client id
FACEBOOK_CLIENT_SECRET=# client secret
MICROSOFT_CLIENT_ID=# client id
MICROSOFT_CLIENT_SECRET=# client secret
MICROSOFT_TENANT_ID=# tenant id
SPOTIFY_CLIENT_ID=# client id
SPOTIFY_CLIENT_SECRET=# client secret

# Email
# For local development, you can spin up a local SMTP server like inbucket
EMAIL_HOST=# for local inbucket: 0.0.0.0
EMAIL_PORT=# for local inbucket: 2500
EMAIL_USERNAME=# for local inbucket: test
EMAIL_PASSWORD=# for local inbucket: none
EMAIL_SENDER=# for local inbucket: noreply@test.com

# Database
# For local development: `docker run -it --rm -e POSTGRES_PASSWORD=password -p "5432:5432" postgres`
DATABASE_CONNECTION_STRING=# enter your connection string here. For local development: `postgres://postgres:password@localhost:5432/stack`
DIRECT_DATABASE_CONNECTION_STRING=# enter your direct (unpooled or session mode) database connection string here. For local development: same as above

# Misc
STACK_ACCESS_TOKEN_EXPIRATION_TIME=# enter the expiration time for the access token here, optional
NEXT_PUBLIC_STACK_HEAD_TAGS=[{ "tagName": "script", "attributes": {}, "innerHTML": "// insert head tags here" }]
